# -*- coding: utf-8 -*-
"""first_results.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1--lk_UNpP57oQyPSOvUs4CmZY4HZzszE
"""

from google.colab import drive

drive.mount('/content/drive', timeout_ms=60000)

pip install pyedflib matplotlib

import pyedflib
import matplotlib.pyplot as plt

# Specify the path to the EDF file
edf_file_path = '/content/drive/MyDrive/sleep-edf-database-expanded-1.0.0/sleep-edf-database-expanded-1.0.0/sleep-cassette/SC4001E0-PSG.edf'

# Open the EDF file
edf_file = pyedflib.EdfReader(edf_file_path)

# Get the number of channels in the EDF file
num_channels = edf_file.signals_in_file

# Plot each channel
for i in range(num_channels):
    # Read data from the current channel
    channel_data = edf_file.readSignal(i)

    # Plot the channel data
    plt.figure(figsize=(10, 4))
    plt.title(f'Channel {i + 1}')
    plt.xlabel('Time')
    plt.ylabel('Amplitude')
    plt.plot(channel_data)
    plt.show()

# Close the EDF file after reading
edf_file.close()

!pip install pyedflib

import pyedflib
import matplotlib.pyplot as plt
import numpy as np

# Specify the path to the EDF file
edf_file_path = '/content/drive/MyDrive/sleep-edf-database-expanded-1.0.0/sleep-edf-database-expanded-1.0.0/sleep-cassette/SC4001E0-PSG.edf'

# Open the EDF file
edf_file = pyedflib.EdfReader(edf_file_path)

# Get the number of channels in the EDF file
num_channels = edf_file.signals_in_file

# Define the frequency bands (in Hz)
frequency_bands = {
    'Delta': (0.5, 4.0),
    'Theta': (4.0, 8.0),
    'Alpha': (8.0, 13.0),
    'Beta': (13.0, 30.0),
    'Gamma': (30.0, 40.0)  # Adjust the upper limit for your specific analysis
}

# Create a dictionary to store the band powers for each channel
band_powers = {band: np.zeros(num_channels) for band in frequency_bands}

# Iterate through each channel
for i in range(num_channels):
    # Read data from the current channel
    channel_data = edf_file.readSignal(i)

    # Compute the power spectral density using FFT
    f, Pxx = plt.psd(channel_data, NFFT=1024, Fs=edf_file.getSampleFrequency(i))

    # Calculate the power within each frequency band
    for band, (low_freq, high_freq) in frequency_bands.items():
        mask = (f >= low_freq) & (f <= high_freq)
        band_power = np.trapz(Pxx[mask], f[mask])
        band_powers[band][i] = band_power

# Close the EDF file after reading
edf_file.close()

# Print the computed band powers for each channel
for band, powers in band_powers.items():
    print(f'{band} Band Powers:')
    for i, power in enumerate(powers):
        print(f'Channel {i + 1}: {power:.2f} uV^2/Hz')
    print()

import pyedflib
import matplotlib.pyplot as plt

# Specify the path to the EDF file
edf_file_path = '/content/drive/MyDrive/sleep-edf-database-expanded-1.0.0/sleep-edf-database-expanded-1.0.0/sleep-cassette/SC4001E0-PSG.edf'

# Open the EDF file
edf_file = pyedflib.EdfReader(edf_file_path)

# Get the number of channels in the EDF file
num_channels = edf_file.signals_in_file

# Get the channel labels (names)
channel_labels = edf_file.getSignalLabels()

# Print the channel names
for i in range(num_channels):
    print(f'Channel {i + 1}: {channel_labels[i]}')

# Plot each channel
for i in range(num_channels):
    # Read data from the current channel
    channel_data = edf_file.readSignal(i)

    # Plot the channel data
    plt.figure(figsize=(10, 4))
    plt.title(f'Channel {i + 1}: {channel_labels[i]}')
    plt.xlabel('Time')
    plt.ylabel('Amplitude')
    plt.plot(channel_data)
    plt.show()

# Close the EDF file after reading
edf_file.close()

!pip install pyedflib

import pyedflib
import matplotlib.pyplot as plt

# Specify the path to the EDF file
edf_file_path = '/content/drive/MyDrive/sleep-edf-database-expanded-1.0.0/sleep-edf-database-expanded-1.0.0/sleep-cassette/SC4001E0-PSG.edf'

# Open the EDF file
edf_file = pyedflib.EdfReader(edf_file_path)

# Get the number of channels in the EDF file
num_channels = edf_file.signals_in_file

# Get the channel labels (names)
channel_labels = edf_file.getSignalLabels()

# Print the channel names
for i in range(num_channels):
    print(f'Channel {i + 1}: {channel_labels[i]}')

# Plot each channel
for i in range(num_channels):
    # Read data from the current channel
    channel_data = edf_file.readSignal(i)

    # Plot the channel data
    plt.figure(figsize=(10, 4))
    plt.title(f'Channel {i + 1}: {channel_labels[i]}')
    plt.xlabel('Time')
    plt.ylabel('Amplitude')
    plt.plot(channel_data)
    plt.show()

# Close the EDF file after reading
edf_file.close()

import pyedflib

# Define the path to your EDF file
edf_file = '/content/drive/MyDrive/sleep-edf-database-expanded-1.0.0/sleep-edf-database-expanded-1.0.0/sleep-cassette/SC4002E0-PSG.edf'

# Define a list of channels you want to keep
channels_to_keep = ['EEG Fpz-Cz', 'EEG Pz-Oz']

# Open the EDF file
edf_reader = pyedflib.EdfReader(edf_file)

# Create a new EDF file for writing
edf_writer = pyedflib.EdfWriter(edf_file, len(channels_to_keep))

# Copy the header information to the new EDF file
edf_writer.setHeader(edf_reader.getHeader())

# Find the indices of channels to keep
channel_indices = [edf_reader.getSignalLabels().index(channel) for channel in channels_to_keep]

# Copy the data from the original file to the new file
for i in range(len(channels_to_keep)):
    samples = edf_reader.readSignal(channel_indices[i])
    edf_writer.writePhysicalSamples(samples)

# Close both the reader and the writer
edf_reader.close()
edf_writer.close()

import os
import pyedflib

# Define the path to your original EDF file and a temporary file
edf_file = '/content/drive/MyDrive/sleep-edf-database-expanded-1.0.0/sleep-edf-database-expanded-1.0.0/sleep-cassette/SC4002E0-PSG.edf'
temp_edf_file = '/content/drive/MyDrive/temp.edf'

# Define a list of channels you want to keep
channels_to_keep = ['EEG Fpz-Cz', 'EEG Pz-Oz']

# Open the original EDF file
edf_reader = pyedflib.EdfReader(edf_file)

# Create a new EDF file for writing (temp file)
edf_writer = pyedflib.EdfWriter(temp_edf_file, len(channels_to_keep))

# Copy the header information to the new EDF file
edf_writer.setHeader(edf_reader.getHeader())

# Find the indices of channels to keep
channel_indices = [edf_reader.getSignalLabels().index(channel) for channel in channels_to_keep]

# Copy the data from the original file to the new file
for i in range(len(channels_to_keep)):
    samples = edf_reader.readSignal(channel_indices[i])
    edf_writer.writePhysicalSamples(samples)

# Close both the reader and the writer
edf_reader.close()
edf_writer.close()

# Replace the original file with the modified file
os.remove(edf_file)
os.rename(temp_edf_file, edf_file)

import shutil
import pyedflib

# Define the path to your original EDF file
edf_file = 'original.edf'

# Make a copy of the original EDF file
temp_edf_file = 'temp.edf'
shutil.copyfile(edf_file, temp_edf_file)

# Define a list of channels you want to keep
channels_to_keep = ['Fp1', 'Fp2', 'C3', 'C4', 'O1', 'O2']

# Open the copied EDF file
edf_reader = pyedflib.EdfReader(temp_edf_file)

# Create a new EDF file for writing (temp file)
edf_writer = pyedflib.EdfWriter(edf_file, len(channels_to_keep))

# Copy the header information to the new EDF file
edf_writer.setHeader(edf_reader.getHeader())

# Find the indices of channels to keep
channel_indices = [edf_reader.getSignalLabels().index(channel) for channel in channels_to_keep]

# Copy the data from the copied file to the new file
for i in range(len(channels_to_keep)):
    samples = edf_reader.readSignal(channel_indices[i])
    edf_writer.writePhysicalSamples(samples)

# Close both the reader and the writer
edf_reader.close()
edf_writer.close()